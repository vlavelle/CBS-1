# Using CBS data without downloading every single column
# Step 1: Find column names that you want, recommend doing cbs_get_meta("identifier") for this, so that you can see what the columns are called when imported into R
# Step 2: make a list of the column names that you want like this:
c("column name 1", "column name 2", column name 3")
# step 3:
# using cbs_get_data as usual, add select = PASTE YOUR LIST HERE
data <- cbs_get_data(id = "84710ENG", select = c("column name 1", "column name 2", "column name 3"))
data
# you will now see it has only downloaded the data with the columns you chose
# you can get more specific and even download with just the specific column entries I think, but I can look at that later



# accessing variables
# first you need to know what all the variables mean! you can find this out by downloading the metadata files from the cbs website 
# (from the homepage of the dataset, not the table page)
# alternatively, you can run:
cbs_get_meta("84755ENG") # 84755 is an example
# this will print column names
# then to find variables you can access each column, which i explain below:

# since CBS adds a whole ton of spaces sometimes, like "PV20    " instead of "PV20", you might need to run the following line:
data$column_name # will print the contents of this entire column, then you can copy and past the entries you need exactly
#e.g.

# TO REMOVE ANNOYING SPACES (can even run this if there are no spaces, it won't affect those columns)
data$column_name <- gsub(" ", "", data$column_name, fixed = TRUE)

north$RegionCharacteristics
# will print (in the dataset I used) "LD01   " "LD02    " "PV20   " "PV21    " and then you copy and paste


# for example, in this case, my dataset is called north, i want to change its contents so i rename it as north
# TravelMotives is the column I want to change here, its entries are all coded, i.e. "2030170" corresponds to "work", that is, traveling for work

north <- north %>% 
  mutate(TravelMotives = replace(TravelMotives, TravelMotives == "2030170", "Work")) %>% 
  mutate(TravelMotives = replace(TravelMotives, TravelMotives == "2030190", "Services/Care")) %>%
  mutate(TravelMotives = replace(TravelMotives, TravelMotives == "2030200", "Shopping"))%>% 
  mutate(TravelMotives = replace(TravelMotives, TravelMotives == "2030210", "Education"))%>% 
  mutate(TravelMotives = replace(TravelMotives, TravelMotives == "2030220", "Visits"))%>% 
  mutate(TravelMotives = replace(TravelMotives, TravelMotives == "2030230", "Leisure/Sports"))%>%
  mutate(TravelMotives = replace(TravelMotives, TravelMotives == "2030240", "Touring/walking"))%>%
  mutate(TravelMotives = replace(TravelMotives, TravelMotives == "2030250", "Other"))%>% 
  mutate(TravelMotives = replace(TravelMotives, TravelMotives == "2820740", "Professionally"))
  
#structure in general terms:

name_of_data <- name_of_data %>%
  mutate(column_name = replace(column_name, column_name == "variable entry as given in CBS data", "what you want to rename the variable as")) %>% 
  mutate(column_name = replace(column_name, column_name == "variable entry as given in CBS data", "what you want to rename the variable as")) %>% 
  mutate(column_name = replace(column_name, column_name == "variable entry as given in CBS data", "what you want to rename the variable as")) %>% 
  mutate(column_name = replace(column_name, column_name == "variable entry as given in CBS data", "what you want to rename the variable as")) 
  #replicate this as many times as you have variables you want to rename, very likely that there is a shorter way to do this, but it works
  
  
  
# filtering (you can do this before or after the above renaming stuff:
north <- north %>% 
  filter(TravelMotives != "T001080") %>%  # this filters travel motives such that is keeps every entry that is not equal to "T001080"
  filter(TravelModes != "T001093") 
 
 # in general terms
name_of_data <- name_of_data %>% 
  filter(Column_name != "column_entry") %>%  # this will filter the column so that it keeps everything except entries of the value "column_entry
  filter(Column_name2 != "column2_entry") 
  
  
  
  # if you don't want to work with every column in the CBS dataset you are using, you can select just the important ones!
data <- cbs_get_data("indicator")
data <- data %>% select(Column1, Column2, Column3, Column4....) # select as many columns as you want to KEEP
